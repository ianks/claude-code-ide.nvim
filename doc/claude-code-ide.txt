*claude-code-ide-ide.txt*    Neovim integration for Claude AI via Model Context Protocol

==============================================================================
CONTENTS                                                  *claude-code-ide-contents*

1. Introduction .................. |claude-code-introduction|
2. Installation .................. |claude-code-installation|
3. Configuration ................. |claude-code-configuration|
4. Commands ...................... |claude-code-commands|
5. Events ........................ |claude-code-events|
6. API ........................... |claude-code-api|

==============================================================================
INTRODUCTION                                          *claude-code-ide-introduction*

claude-code-ide.nvim integrates Claude AI directly into Neovim through the Model
Context Protocol (MCP). It provides a WebSocket server that allows Claude CLI
to connect and interact with your editor.

Features:
- WebSocket MCP server for Claude CLI integration
- Automatic server discovery via lock files
- Send code, diagnostics, and editor state to Claude
- Interactive conversation window
- Rich set of MCP tools for editor interaction
- Secure authentication and localhost-only binding

==============================================================================
INSTALLATION                                          *claude-code-ide-installation*

Using lazy.nvim: >lua

  -- First, install luarocks support for SHA1 dependency
  {
    "vhyrro/luarocks.nvim",
    priority = 1001,
    opts = {
      rocks = { "sha1" }
    }
  },

  -- Then install claude-code-ide.nvim
  {
    "ianks/claude-code-ide.nvim",
    dependencies = {
      "nvim-lua/plenary.nvim",
      "vhyrro/luarocks.nvim",
    },
    config = function()
      require("claude-code-ide").setup({
        -- Configuration options
      })
    end,
  }
<

==============================================================================
CONFIGURATION                                        *claude-code-ide-configuration*

Setup function accepts these options: >lua

  require("claude-code-ide").setup({
    -- Server settings
    port = 0,                    -- 0 for random port (10000-65535)
    host = "127.0.0.1",         -- Localhost only for security
    
    -- Paths
    lock_file_dir = vim.fn.expand("~/.claude/ide"),
    
    -- Server info
    server_name = "claude-code-ide.nvim",
    server_version = "0.1.0",
    
    -- UI settings
    ui = {
      conversation = {
        position = "right",
        width = 80,
        border = "rounded",
      },
    },
    
    -- Debug
    debug = false,
  })
<

==============================================================================
COMMANDS                                                  *claude-code-ide-commands*

                                                            *:ClaudeCodeStart*
:ClaudeCodeStart     Start the MCP server

                                                             *:ClaudeCodeStop*
:ClaudeCodeStop      Stop the MCP server

                                                           *:ClaudeCodeToggle*
:ClaudeCodeToggle    Toggle conversation window

                                                           *:ClaudeCodeStatus*
:ClaudeCodeStatus    Show server status

                                                          *:ClaudeCodeRestart*
:ClaudeCodeRestart   Restart the server

                                                               *:ClaudeNew*
:ClaudeNew           Start a new Claude session in terminal

                                                            *:ClaudeToggle*
:ClaudeToggle        Toggle Claude terminal

==============================================================================
EVENTS                                                      *claude-code-ide-events*

The plugin emits various events that you can listen to:

                                              *claude-code-ide-ide:ServerStarted*
ServerStarted        Emitted when the MCP server starts
                     Data: { port = number, auth_token = string }

                                              *claude-code-ide-ide:ServerStopped*
ServerStopped        Emitted when the MCP server stops
                     Data: { reason = string }

                                           *claude-code-ide-ide:ClientConnected*
ClientConnected      Emitted when a client connects
                     Data: { client_id = string }

                                        *claude-code-ide-ide:ClientDisconnected*
ClientDisconnected   Emitted when a client disconnects
                     Data: { client_id = string, reason = string }

                                                *claude-code-ide-ide:RpcRequest*
RpcRequest           Emitted for incoming RPC requests
                     Data: { method = string, params = table, id = any }

                                               *claude-code-ide-ide:RpcResponse*
RpcResponse          Emitted for outgoing RPC responses
                     Data: { result = any, error = table, id = any }

                                            *claude-code-ide-ide:RpcNotification*
RpcNotification      Emitted for incoming notifications
                     Data: { method = string, params = table }

                                              *claude-code-ide-ide:ToolExecuted*
ToolExecuted         Emitted when a tool is executed
                     Data: { tool = string, params = table, result = any }

Example usage: >lua

  local events = require("claude-code-ide.events")
  
  -- Listen to server events
  events.on("ServerStarted", function(data)
    vim.notify("Claude server started on port " .. data.port)
  end)
  
  -- Listen to all events
  events.on("*", function(event, data)
    print("Event:", event, vim.inspect(data))
  end)
<

==============================================================================
API                                                            *claude-code-ide-api*

                                                          *claude-code-ide.setup()*
setup({opts})        Configure the plugin
                     Parameters: ~
                       {opts}  Configuration table (optional)

                                                          *claude-code-ide.start()*
start()              Start the MCP server
                     Returns: ~
                       Server instance

                                                           *claude-code-ide.stop()*
stop()               Stop the MCP server

                                                         *claude-code-ide.status()*
status()             Get server status
                     Returns: ~
                       Status table with running state and port

                                                        *claude-code-ide.restart()*
restart()            Restart the MCP server

vim:tw=78:ts=8:ft=help:norl: